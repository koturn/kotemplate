function(detect_latest_cxx_version)
  set(options)
  set(oneValueArgs
    REQUIRED_VERSION)
  cmake_parse_arguments(LATEST_CXX "${options}" "${oneValueArgs}" "" ${ARGN})

  if (NOT LATEST_CXX_REQUIRED_VERSION EQUAL 0 AND (NOT LATEST_CXX_REQUIRED_VERSION OR "${LATEST_CXX_REQUIRED_VERSION}" STREQUAL ""))
    set(LATEST_CXX_REQUIRED_VERSION 98)
  endif()

  if(MSVC)
    if(MSVC_VERSION GREATER_EQUAL 1910)
      set(LATEST_CXX_VERSION 17)
    elseif(MSVC_VERSION GREATER_EQUAL 1900)
      set(LATEST_CXX_VERSION 14)
    elseif(MSVC_VERSION GREATER_EQUAL 1800)
      set(LATEST_CXX_VERSION 11)
    else()
      set(LATEST_CXX_VERSION 98)
    endif()
  elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.0)
      set(LATEST_CXX_VERSION 17)
    elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 3.2)
      set(LATEST_CXX_VERSION 14)
    else()
      set(LATEST_CXX_VERSION 11)
    endif()
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 5.1)
      set(LATEST_CXX_VERSION 17)
    elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.8)
      set(LATEST_CXX_VERSION 14)
    elseif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.3)
      set(LATEST_CXX_VERSION 11)
    else()
      set(LATEST_CXX_VERSION 98)
    endif()
  else()
    set(LATEST_CXX_VERSION ${REQUIRED_VERSION})
  endif()

  if(NOT LATEST_CXX_REQUIRED_VERSION EQUAL 98
      AND NOT LATEST_CXX_VERSION EQUAL 98
      AND LATEST_CXX_VERSION LESS ${LATEST_CXX_REQUIRED_VERSION})
    message(FATAL_ERROR "Detected CXX version is ${LATEST_CXX_VERSION} but the version is less than required CXX version, ${LATEST_CXX_REQUIRED_VERSION}.")
  endif()
  set(LATEST_CXX_VERSION "${LATEST_CXX_VERSION}" CACHE STRING "Available latest C++ version")
endfunction()
