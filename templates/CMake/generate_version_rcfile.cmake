include(CMakeParseArguments)

# You can specify resource strings in arguments:
#   NAME                      - name of executable (no defaults)
#   BUNDLE                    - bundle (${NAME} is default)
#   VERSION_MAJOR             - 1 is default
#   VERSION_MINOR             - 0 is default
#   VERSION_PATCH             - 0 is default
#   VERSION_REVISION          - 0 is default
#   FILE_VERSION_MAJOR        - ${VERSION_MAJOR} is default
#   FILE_VERSION_MINOR        - ${VERSION_MINOR} is default
#   FILE_VERSION_PATCH        - ${VERSION_PATCH} is default
#   FILE_VERSION_REVISION     - ${VERSION_REVISION} is default
#   PRODUCT_VERSION_MAJOR     - ${VERSION_MAJOR} is default
#   PRODUCT_VERSION_MINOR     - ${VERSION_MINOR} is default
#   PRODUCT_VERSION_PATCH     - ${VERSION_PATCH} is default
#   PRODUCT_VERSION_REVISION  - ${VERSION_REVISION} is default
#   COMPANY_NAME              - your company name (no defaults)
#   COMPANY_COPYRIGHT         - ${COMPANY_NAME} (C) Copyright ${CURRENT_YEAR} is default
#   COMMENTS                  - ${NAME} v${VERSION_MAJOR}.${VERSION_MINOR} is default
#   ORIGINAL_FILENAME         - ${NAME} is default
#   INTERNAL_NAME             - ${NAME} is default
#   FILE_DESCRIPTION          - ${NAME} is default
function(generate_version_rcfile rcfile)
  set(options)
  set(oneValueArgs
    NAME
    BUNDLE
    VERSION_MAJOR
    VERSION_MINOR
    VERSION_PATCH
    VERSION_REVISION
    FILE_VERSION_MAJOR
    FILE_VERSION_MINOR
    FILE_VERSION_PATCH
    FILE_VERSION_REVISION
    PRODUCT_VERSION_MAJOR
    PRODUCT_VERSION_MINOR
    PRODUCT_VERSION_PATCH
    PRODUCT_VERSION_REVISION
    COMPANY_NAME
    COMPANY_COPYRIGHT
    COMMENTS
    ORIGINAL_FILENAME
    INTERNAL_NAME
    FILE_DESCRIPTION)
  set(multiValueArgs)
  cmake_parse_arguments(VERSIONRC "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  if (NOT VERSIONRC_BUNDLE OR "${VERSIONRC_BUNDLE}" STREQUAL "")
    set(VERSIONRC_BUNDLE "${VERSIONRC_NAME}")
  endif()

  # Version (Default value for file version and product version)
  if (NOT VERSIONRC_VERSION_MAJOR EQUAL 0 AND (NOT VERSIONRC_VERSION_MAJOR OR "${VERSIONRC_VERSION_MAJOR}" STREQUAL ""))
    set(VERSIONRC_VERSION_MAJOR 1)
  endif()
  if (NOT VERSIONRC_VERSION_MINOR EQUAL 0 AND (NOT VERSIONRC_VERSION_MINOR OR "${VERSIONRC_VERSION_MINOR}" STREQUAL ""))
    set(VERSIONRC_VERSION_MINOR 0)
  endif()
  if (NOT VERSIONRC_VERSION_PATCH EQUAL 0 AND (NOT VERSIONRC_VERSION_PATCH OR "${VERSIONRC_VERSION_PATCH}" STREQUAL ""))
    set(VERSIONRC_VERSION_PATCH 0)
  endif()
  if (NOT VERSIONRC_VERSION_REVISION EQUAL 0 AND (NOT VERSIONRC_VERSION_REVISION OR "${VERSIONRC_VERSION_REVISION}" STREQUAL ""))
    set(VERSIONRC_VERSION_REVISION 0)
  endif()

  # File version
  if (NOT VERSIONRC_FILE_VERSION_MAJOR EQUAL 0 AND (NOT VERSIONRC_FILE_VERSION_MAJOR OR "${VERSIONRC_FILE_VERSION_MAJOR}" STREQUAL ""))
    set(VERSIONRC_FILE_VERSION_MAJOR ${VERSIONRC_VERSION_MAJOR})
  endif()
  if (NOT VERSIONRC_FILE_VERSION_MINOR EQUAL 0 AND (NOT VERSIONRC_FILE_VERSION_MINOR OR "${VERSIONRC_FILE_VERSION_MINOR}" STREQUAL ""))
    set(VERSIONRC_FILE_VERSION_MINOR ${VERSIONRC_VERSION_MINOR})
  endif()
  if (NOT VERSIONRC_FILE_VERSION_PATCH EQUAL 0 AND (NOT VERSIONRC_FILE_VERSION_PATCH OR "${VERSIONRC_FILE_VERSION_PATCH}" STREQUAL ""))
    set(VERSIONRC_FILE_VERSION_PATCH ${VERSIONRC_VERSION_PATCH})
  endif()
  if (NOT VERSIONRC_FILE_VERSION_REVISION EQUAL 0 AND (NOT VERSIONRC_FILE_VERSION_REVISION OR "${VERSIONRC_FILE_VERSION_REVISION}" STREQUAL ""))
    set(VERSIONRC_FILE_VERSION_REVISION  ${VERSIONRC_VERSION_REVISION})
  endif()

  # Product version
  if (NOT VERSIONRC_PRODUCT_VERSION_MAJOR EQUAL 0 AND (NOT VERSIONRC_PRODUCT_VERSION_MAJOR OR "${VERSIONRC_PRODUCT_VERSION_MAJOR}" STREQUAL ""))
    set(VERSIONRC_PRODUCT_VERSION_MAJOR ${VERSIONRC_VERSION_MAJOR})
  endif()
  if (NOT VERSIONRC_PRODUCT_VERSION_MINOR EQUAL 0 AND (NOT VERSIONRC_PRODUCT_VERSION_MINOR OR "${VERSIONRC_PRODUCT_VERSION_MINOR}" STREQUAL ""))
    set(VERSIONRC_PRODUCT_VERSION_MINOR ${VERSIONRC_VERSION_MINOR})
  endif()
  if (NOT VERSIONRC_PRODUCT_VERSION_PATCH EQUAL 0 AND (NOT VERSIONRC_PRODUCT_VERSION_PATCH OR "${VERSIONRC_PRODUCT_VERSION_PATCH}" STREQUAL ""))
    set(VERSIONRC_PRODUCT_VERSION_PATCH ${VERSIONRC_VERSION_PATCH})
  endif()
  if (NOT VERSIONRC_PRODUCT_VERSION_REVISION EQUAL 0 AND (NOT VERSIONRC_PRODUCT_VERSION_REVISION OR "${VERSIONRC_PRODUCT_VERSION_REVISION}" STREQUAL ""))
    set(VERSIONRC_PRODUCT_VERSION_REVISION  ${VERSIONRC_VERSION_REVISION})
  endif()

  if (NOT VERSIONRC_COMPANY_COPYRIGHT OR "${VERSIONRC_COMPANY_COPYRIGHT}" STREQUAL "")
    string(TIMESTAMP VERSIONRC_CURRENT_YEAR "%Y")
    set(VERSIONRC_COMPANY_COPYRIGHT "${VERSIONRC_COMPANY_NAME} (C) Copyright ${VERSIONRC_CURRENT_YEAR}")
  endif()
  if (NOT VERSIONRC_COMMENTS OR "${VERSIONRC_COMMENTS}" STREQUAL "")
    set(VERSIONRC_COMMENTS "${VERSIONRC_NAME} v${VERSIONRC_VERSION_MAJOR}.${VERSIONRC_VERSION_MINOR}")
  endif()
  if (NOT VERSIONRC_ORIGINAL_FILENAME OR "${VERSIONRC_ORIGINAL_FILENAME}" STREQUAL "")
    set(VERSIONRC_ORIGINAL_FILENAME "${VERSIONRC_NAME}")
  endif()
  if (NOT VERSIONRC_INTERNAL_NAME OR "${VERSIONRC_INTERNAL_NAME}" STREQUAL "")
    set(VERSIONRC_INTERNAL_NAME "${VERSIONRC_NAME}")
  endif()
  if (NOT VERSIONRC_FILE_DESCRIPTION OR "${VERSIONRC_FILE_DESCRIPTION}" STREQUAL "")
    set(VERSIONRC_FILE_DESCRIPTION "${VERSIONRC_NAME}")
  endif()

  configure_file(
    ${CMAKE_SOURCE_DIR}/cmake/templates/VersionInfo.rc.in
    ${rcfile}
    @ONLY)
endfunction()
